function [parameters, inliers, x_win, x_tf_win, y_win, y_tf_win] = image_alignment( image1, image2, N, P )
    
    % Converting images to grayscale
    if size(image1,3) > 1
        image1 = rgb2gray(image1);
        image2 = rgb2gray(image2);
    end
    
    % Making the images singles 
    im1 = single(image1);
    im2 = single(image2);
    
    % Compute the keypoints and descriptors
    [fa, da] = vl_sift(im1);
    [fb, db] = vl_sift(im2);
    
    % Getting the matching keypoints
    [matches] = vl_ubcmatch(da, db);
    
    % Define the old and new x and y coordinates of the matches
    x = fa(1, matches(1,:));
    y = fa(2, matches(1,:));
    x_tf_true = fb(1, matches(2,:));
    y_tf_true = fb(2, matches (2,:));
    
    % Keeping track of the max_inliers for N iterations
    max_inliers = 0;
    
    % Get best set of transformation parameters in N iterations
    for i = 1:N
        
        % Pick P random matches
        random_indices = randi([1 size(matches,2)],1,P);
        
        % Define the old and new x and y coordinates for the P matches
        x_p = x(random_indices);
        y_p = y(random_indices); 
        x_tf_p = x_tf_true(random_indices); 
        y_tf_p = y_tf_true(random_indices);
        
        % Compute A and b 
        A = zeros(2*P, 6);
        b = zeros(2*P, 1);
        j = 1;
        for h = 1:2:2*P
            A(h,:) = [ x_p(j) y_p(j) 0 0 1 0 ];
            A(h+1,:) = [ 0 0 x_p(j) y_p(j) 0 1 ];
            b(h,:) = x_tf_p(j);
            b(h+1,:) = y_tf_p(j);
            j =  j + 1;
        end
        
        % Compute the parameters t and m
        t = pinv(A)*b;
        M = [t(1) t(2); t(3) t(4)];
        T = [t(5); t(6)];
        
        % Computing transformed coordinates for ALL matches
        x_tf = zeros(size(x));
        y_tf = zeros(size(y));
        for j = 1:size(x,2)
            temp = (M * [x(j);y(j)] + T);
            x_tf(j) = temp(1,:);
            y_tf(j) = temp(2,:);
        end
        
        % Calculate the Euclidean distance between the ground truth and the
        % transposed coordinates
        
        Euclid = sqrt(((x_tf_true - x_tf).^ 2)+((y_tf_true - y_tf).^ 2));

        if sum(Euclid<10) > max_inliers
            max_inliers = sum(Euclid<10);
            I = find(Euclid < 10);
            parameters = t;
            winning_matches = random_indices;
            
            % Getting the coordinates of the inliers
            inliers = zeros(size(I,2),2);
            x_2 = x';
            y_2 = y';
            inliers(:,1) = x_2(I);
            inliers(:,2) = y_2(I);
        end
    end
    
    % Define the old and new x and y coordinates of winning matches
    x_win = x(winning_matches);
    y_win = y(winning_matches); 
    
    % Computing only the transformed coordinates of the winning matches
    x_tf_win = zeros(size(x_win));
    y_tf_win = zeros(size(y_win));
    for j = 1:size(x_win,2)
        temp = (M * [x_win(j);y_win(j)] + T);
        x_tf_win(j) = temp(1,:);
        y_tf_win(j) = temp(2,:);
    end
    
    % Pick 50 random matches
    random_matches = randi([1 size(matches,2)],1,50);
    % Define the old and new x and y coordinates of the matches
    x_rand = x(random_matches);
    y_rand = y(random_matches);
    x_tf_rand = x_tf_true(random_matches);
    y_tf_rand = y_tf_p(random_matches);
    
    disp(max_inliers)
end

