function imOut = myHistMatching ( input , reference )

imOut = zeros(size(input));

[counts_I,binLocations_I] = imhist(input) ;
[counts_R,binLocations_R] = imhist(reference) ;

 % cumulative distributions
 
 c_input = cumsum(counts_I);
 c_ref = cumsum(counts_R);
 
 %normalize
 
 c_input = c_input ./ c_input(end) ;
 c_ref = c_ref ./ c_ref(end) ;
 
%  wiki : each gray level  G1 in [0,255], 
%  we find the gray level  G2, for which  
%  F1(G1)=F2(G2), and this is the result of histogram matching function:  
%  M(G1)=G2, 
%  Finally, we apply the function M() 
%  on each pixel of the reference image.
% For us
% M = array 
% F1 = c_input
% F2 = c_ref

F1 = c_input ;
F2 = c_ref;

M = zeros(size(F1));

g2 = 1;
for g1 = 1:length(M)
    flag = false;
    
    while(~flag)
        if (g2==1)
            if(F1(g1) < F2(g2))
                M(g1)=0;
                flag = true;
            else
                g2 = g2+1;
            end
        elseif (g2>=length(M))
            M(g1) = length(M)-1; %255? check
            flag = true;
            
        elseif((F1(g1)>=F2(g2-1)) && (F1(g1)<F2(g2)))
            M(g1) = g2-1;
            flag = true;
        else
            g2=g2+1;
        end
    end
    
    disp(M)
end
% imOut = M;
 height = size(input,1);
 width = size(input,2);
%  imOut = 0;

% recreate image based on mapping

for i=1:height
    for j=1:width
        imOut(i,j) = M(input(i,j)+1);
    end
end

imshow(imOut,[])
% figure
% subplot(1,2,1)
% plot(cumsum(reference))
% % histogram(reference)
% subplot(1,2,2)
% % histogram(imOut)
% plot(cumsum(imOut))


end

